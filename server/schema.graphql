type Query {
  hello: String!
  feed(skip: Int, take: Int, orderBy: MessageOrderByInput): [Message!]!
  users(skip: Int, take: Int): [User!]!
}

input MessageOrderByInput {
  id: Sort
  text: Sort
  timeStamp: Sort
}

enum Sort {
  asc
  desc
}

type Mutation {
  login(email: String!, password: String!): AuthPayload
  register(name: String!, email: String!, password: String!): AuthPayload

  addMessage(text: String!): Message!
}

type AuthPayload {
  user: User!
  token: String!
}

type Subscription {
  newMessage: Message
}

type Message {
  id: Int!
  timeStamp: String!
  text: String!
  postedBy: User
}

type User {
  id: Int!
  name: String!
  email: String!
  messages: [Message]
}
